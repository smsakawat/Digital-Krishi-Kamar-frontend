{"ast":null,"code":"import _objectSpread from \"G:/CODE/Development/Projects/Frontend/Digital-Krishi-Khamar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"G:/CODE/Development/Projects/Frontend/Digital-Krishi-Khamar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"G:/CODE/Development/Projects/Frontend/Digital-Krishi-Khamar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n/**\r\n * Open a database.\r\n *\r\n * @param name Name of the database.\r\n * @param version Schema version.\r\n * @param callbacks Additional callbacks.\r\n */\n\nfunction openDB(name, version) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      blocked = _ref.blocked,\n      upgrade = _ref.upgrade,\n      blocking = _ref.blocking,\n      terminated = _ref.terminated;\n\n  var request = indexedDB.open(name, version);\n  var openPromise = wrap(request);\n\n  if (upgrade) {\n    request.addEventListener('upgradeneeded', function (event) {\n      upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n    });\n  }\n\n  if (blocked) request.addEventListener('blocked', function () {\n    return blocked();\n  });\n  openPromise.then(function (db) {\n    if (terminated) db.addEventListener('close', function () {\n      return terminated();\n    });\n    if (blocking) db.addEventListener('versionchange', function () {\n      return blocking();\n    });\n  }).catch(function () {});\n  return openPromise;\n}\n/**\r\n * Delete a database.\r\n *\r\n * @param name Name of the database.\r\n */\n\n\nfunction deleteDB(name) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      blocked = _ref2.blocked;\n\n  var request = indexedDB.deleteDatabase(name);\n  if (blocked) request.addEventListener('blocked', function () {\n    return blocked();\n  });\n  return wrap(request).then(function () {\n    return undefined;\n  });\n}\n\nvar readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nvar writeMethods = ['put', 'add', 'delete', 'clear'];\nvar cachedMethods = new Map();\n\nfunction getMethod(target, prop) {\n  if (!(target instanceof IDBDatabase && !(prop in target) && typeof prop === 'string')) {\n    return;\n  }\n\n  if (cachedMethods.get(prop)) return cachedMethods.get(prop);\n  var targetFuncName = prop.replace(/FromIndex$/, '');\n  var useIndex = prop !== targetFuncName;\n  var isWrite = writeMethods.includes(targetFuncName);\n\n  if ( // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n  !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) || !(isWrite || readMethods.includes(targetFuncName))) {\n    return;\n  }\n\n  var method = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(storeName) {\n      var _target;\n\n      var tx,\n          target,\n          _len,\n          args,\n          _key,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n              tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n              target = tx.store;\n\n              for (_len = _args.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n                args[_key - 1] = _args[_key];\n              }\n\n              if (useIndex) target = target.index(args.shift()); // Must reject if op rejects.\n              // If it's a write operation, must reject if tx.done rejects.\n              // Must reject with op rejection first.\n              // Must resolve with op value.\n              // Must handle both promises (no unhandled rejections)\n\n              _context.next = 6;\n              return Promise.all([(_target = target)[targetFuncName].apply(_target, args), isWrite && tx.done]);\n\n            case 6:\n              return _context.abrupt(\"return\", _context.sent[0]);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function method(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  cachedMethods.set(prop, method);\n  return method;\n}\n\nreplaceTraps(function (oldTraps) {\n  return _objectSpread(_objectSpread({}, oldTraps), {}, {\n    get: function get(target, prop, receiver) {\n      return getMethod(target, prop) || oldTraps.get(target, prop, receiver);\n    },\n    has: function has(target, prop) {\n      return !!getMethod(target, prop) || oldTraps.has(target, prop);\n    }\n  });\n});\nexport { deleteDB, openDB };","map":{"version":3,"sources":["G:/CODE/Development/Projects/Frontend/Digital-Krishi-Khamar/node_modules/idb/build/index.js"],"names":["w","wrap","r","replaceTraps","u","unwrap","openDB","name","version","blocked","upgrade","blocking","terminated","request","indexedDB","open","openPromise","addEventListener","event","result","oldVersion","newVersion","transaction","then","db","catch","deleteDB","deleteDatabase","undefined","readMethods","writeMethods","cachedMethods","Map","getMethod","target","prop","IDBDatabase","get","targetFuncName","replace","useIndex","isWrite","includes","IDBIndex","IDBObjectStore","prototype","method","storeName","tx","store","args","index","shift","Promise","all","done","set","oldTraps","receiver","has"],"mappings":"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","sourcesContent":["import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\r\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\r\n\r\n/**\r\n * Open a database.\r\n *\r\n * @param name Name of the database.\r\n * @param version Schema version.\r\n * @param callbacks Additional callbacks.\r\n */\r\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\r\n    const request = indexedDB.open(name, version);\r\n    const openPromise = wrap(request);\r\n    if (upgrade) {\r\n        request.addEventListener('upgradeneeded', (event) => {\r\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\r\n        });\r\n    }\r\n    if (blocked)\r\n        request.addEventListener('blocked', () => blocked());\r\n    openPromise\r\n        .then((db) => {\r\n        if (terminated)\r\n            db.addEventListener('close', () => terminated());\r\n        if (blocking)\r\n            db.addEventListener('versionchange', () => blocking());\r\n    })\r\n        .catch(() => { });\r\n    return openPromise;\r\n}\r\n/**\r\n * Delete a database.\r\n *\r\n * @param name Name of the database.\r\n */\r\nfunction deleteDB(name, { blocked } = {}) {\r\n    const request = indexedDB.deleteDatabase(name);\r\n    if (blocked)\r\n        request.addEventListener('blocked', () => blocked());\r\n    return wrap(request).then(() => undefined);\r\n}\r\n\r\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\r\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\r\nconst cachedMethods = new Map();\r\nfunction getMethod(target, prop) {\r\n    if (!(target instanceof IDBDatabase &&\r\n        !(prop in target) &&\r\n        typeof prop === 'string')) {\r\n        return;\r\n    }\r\n    if (cachedMethods.get(prop))\r\n        return cachedMethods.get(prop);\r\n    const targetFuncName = prop.replace(/FromIndex$/, '');\r\n    const useIndex = prop !== targetFuncName;\r\n    const isWrite = writeMethods.includes(targetFuncName);\r\n    if (\r\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\r\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\r\n        !(isWrite || readMethods.includes(targetFuncName))) {\r\n        return;\r\n    }\r\n    const method = async function (storeName, ...args) {\r\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\r\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\r\n        let target = tx.store;\r\n        if (useIndex)\r\n            target = target.index(args.shift());\r\n        // Must reject if op rejects.\r\n        // If it's a write operation, must reject if tx.done rejects.\r\n        // Must reject with op rejection first.\r\n        // Must resolve with op value.\r\n        // Must handle both promises (no unhandled rejections)\r\n        return (await Promise.all([\r\n            target[targetFuncName](...args),\r\n            isWrite && tx.done,\r\n        ]))[0];\r\n    };\r\n    cachedMethods.set(prop, method);\r\n    return method;\r\n}\r\nreplaceTraps((oldTraps) => ({\r\n    ...oldTraps,\r\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\r\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\r\n}));\r\n\r\nexport { deleteDB, openDB };\r\n"]},"metadata":{},"sourceType":"module"}