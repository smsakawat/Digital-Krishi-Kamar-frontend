{"ast":null,"code":"/**\r\n * This function create an object from keys, value and then assign to target\r\n *\r\n * @param {Object} obj : the target object to be assigned\r\n * @param {string[]} keys\r\n * @param {string | number} value\r\n *\r\n * @example\r\n * const source = {}\r\n * assignNestedKeys(source, ['palette', 'primary'], 'var(--palette-primary)')\r\n * console.log(source) // { palette: { primary: 'var(--palette-primary)' } }\r\n *\r\n * @example\r\n * const source = { palette: { primary: 'var(--palette-primary)' } }\r\n * assignNestedKeys(source, ['palette', 'secondary'], 'var(--palette-secondary)')\r\n * console.log(source) // { palette: { primary: 'var(--palette-primary)', secondary: 'var(--palette-secondary)' } }\r\n */\nexport const assignNestedKeys = (obj, keys, value, arrayKeys = []) => {\n  let temp = obj;\n  keys.forEach((k, index) => {\n    if (index === keys.length - 1) {\n      if (Array.isArray(temp)) {\n        temp[Number(k)] = value;\n      } else if (temp && typeof temp === 'object') {\n        temp[k] = value;\n      }\n    } else if (temp && typeof temp === 'object') {\n      if (!temp[k]) {\n        temp[k] = arrayKeys.includes(k) ? [] : {};\n      }\n\n      temp = temp[k];\n    }\n  });\n};\n/**\r\n *\r\n * @param {Object} obj : source object\r\n * @param {Function} callback : a function that will be called when\r\n *                   - the deepest key in source object is reached\r\n *                   - the value of the deepest key is NOT `undefined` | `null`\r\n *\r\n * @example\r\n * walkObjectDeep({ palette: { primary: { main: '#000000' } } }, console.log)\r\n * // ['palette', 'primary', 'main'] '#000000'\r\n */\n\nexport const walkObjectDeep = (obj, callback, shouldSkipPaths) => {\n  function recurse(object, parentKeys = [], arrayKeys = []) {\n    Object.entries(object).forEach(([key, value]) => {\n      if (!shouldSkipPaths || shouldSkipPaths && !shouldSkipPaths([...parentKeys, key])) {\n        if (value !== undefined && value !== null) {\n          if (typeof value === 'object' && Object.keys(value).length > 0) {\n            recurse(value, [...parentKeys, key], Array.isArray(value) ? [...arrayKeys, key] : arrayKeys);\n          } else {\n            callback([...parentKeys, key], value, arrayKeys);\n          }\n        }\n      }\n    });\n  }\n\n  recurse(obj);\n};\n\nconst getCssValue = (keys, value) => {\n  if (typeof value === 'number') {\n    if (['lineHeight', 'fontWeight', 'opacity', 'zIndex'].some(prop => keys.includes(prop))) {\n      // CSS property that are unitless\n      return value;\n    }\n\n    const lastKey = keys[keys.length - 1];\n\n    if (lastKey.toLowerCase().indexOf('opacity') >= 0) {\n      // opacity values are unitless\n      return value;\n    }\n\n    return `${value}px`;\n  }\n\n  return value;\n};\n/**\r\n * a function that parse theme and return { css, vars }\r\n *\r\n * @param {Object} theme\r\n * @param {{\r\n *  prefix?: string,\r\n *  basePrefix?: string,\r\n *  shouldSkipGeneratingVar?: (objectPathKeys: Array<string>, value: string | number) => boolean\r\n * }} options.\r\n *  `basePrefix`: defined by design system.\r\n *  `prefix`: defined by application\r\n *\r\n *   the CSS variable value will be adjusted based on the provided `basePrefix` & `prefix` which can be found in `parsedTheme`.\r\n *\r\n * @returns {{ css: Object, vars: Object, parsedTheme: typeof theme }} `css` is the stylesheet, `vars` is an object to get css variable (same structure as theme), and `parsedTheme` is the cloned version of theme.\r\n *\r\n * @example\r\n * const { css, vars, parsedTheme } = parser({\r\n *   fontSize: 12,\r\n *   lineHeight: 1.2,\r\n *   palette: { primary: { 500: 'var(--color)' } }\r\n * }, { prefix: 'foo' })\r\n *\r\n * console.log(css) // { '--foo-fontSize': '12px', '--foo-lineHeight': 1.2, '--foo-palette-primary-500': 'var(--foo-color)' }\r\n * console.log(vars) // { fontSize: '--foo-fontSize', lineHeight: '--foo-lineHeight', palette: { primary: { 500: 'var(--foo-palette-primary-500)' } } }\r\n * console.log(parsedTheme) // { fontSize: 12, lineHeight: 1.2, palette: { primary: { 500: 'var(--foo-color)' } } }\r\n */\n\n\nexport default function cssVarsParser(theme, options) {\n  const {\n    prefix,\n    basePrefix = '',\n    shouldSkipGeneratingVar\n  } = options || {};\n  const css = {};\n  const vars = {};\n  const parsedTheme = {};\n  walkObjectDeep(theme, (keys, value, arrayKeys) => {\n    if (typeof value === 'string' || typeof value === 'number') {\n      if (typeof value === 'string' && value.match(/var\\(\\s*--/)) {\n        // for CSS variable, apply prefix or remove basePrefix from the variable\n        if (!basePrefix && prefix) {\n          value = value.replace(/var\\(\\s*--/g, `var(--${prefix}-`);\n        } else {\n          value = prefix ? value.replace(new RegExp(`var\\\\(\\\\s*--${basePrefix}`, 'g'), `var(--${prefix}`) // removing spaces\n          : value.replace(new RegExp(`var\\\\(\\\\s*--${basePrefix}-`, 'g'), 'var(--');\n        }\n      }\n\n      if (!shouldSkipGeneratingVar || shouldSkipGeneratingVar && !shouldSkipGeneratingVar(keys, value)) {\n        // only create css & var if `shouldSkipGeneratingVar` return false\n        const cssVar = `--${prefix ? `${prefix}-` : ''}${keys.join('-')}`;\n        Object.assign(css, {\n          [cssVar]: getCssValue(keys, value)\n        });\n        assignNestedKeys(vars, keys, `var(${cssVar})`, arrayKeys);\n      }\n    }\n\n    assignNestedKeys(parsedTheme, keys, value, arrayKeys);\n  }, keys => keys[0] === 'vars' // skip 'vars/*' paths\n  );\n  return {\n    css,\n    vars,\n    parsedTheme\n  };\n}","map":{"version":3,"sources":["G:/CODE/Development/Projects/Frontend/Digital-Krishi-Khamar/node_modules/@mui/system/esm/cssVars/cssVarsParser.js"],"names":["assignNestedKeys","obj","keys","value","arrayKeys","temp","forEach","k","index","length","Array","isArray","Number","includes","walkObjectDeep","callback","shouldSkipPaths","recurse","object","parentKeys","Object","entries","key","undefined","getCssValue","some","prop","lastKey","toLowerCase","indexOf","cssVarsParser","theme","options","prefix","basePrefix","shouldSkipGeneratingVar","css","vars","parsedTheme","match","replace","RegExp","cssVar","join","assign"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,gBAAgB,GAAG,CAACC,GAAD,EAAMC,IAAN,EAAYC,KAAZ,EAAmBC,SAAS,GAAG,EAA/B,KAAsC;AACpE,MAAIC,IAAI,GAAGJ,GAAX;AACAC,EAAAA,IAAI,CAACI,OAAL,CAAa,CAACC,CAAD,EAAIC,KAAJ,KAAc;AACzB,QAAIA,KAAK,KAAKN,IAAI,CAACO,MAAL,GAAc,CAA5B,EAA+B;AAC7B,UAAIC,KAAK,CAACC,OAAN,CAAcN,IAAd,CAAJ,EAAyB;AACvBA,QAAAA,IAAI,CAACO,MAAM,CAACL,CAAD,CAAP,CAAJ,GAAkBJ,KAAlB;AACD,OAFD,MAEO,IAAIE,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAA5B,EAAsC;AAC3CA,QAAAA,IAAI,CAACE,CAAD,CAAJ,GAAUJ,KAAV;AACD;AACF,KAND,MAMO,IAAIE,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAA5B,EAAsC;AAC3C,UAAI,CAACA,IAAI,CAACE,CAAD,CAAT,EAAc;AACZF,QAAAA,IAAI,CAACE,CAAD,CAAJ,GAAUH,SAAS,CAACS,QAAV,CAAmBN,CAAnB,IAAwB,EAAxB,GAA6B,EAAvC;AACD;;AAEDF,MAAAA,IAAI,GAAGA,IAAI,CAACE,CAAD,CAAX;AACD;AACF,GAdD;AAeD,CAjBM;AAkBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMO,cAAc,GAAG,CAACb,GAAD,EAAMc,QAAN,EAAgBC,eAAhB,KAAoC;AAChE,WAASC,OAAT,CAAiBC,MAAjB,EAAyBC,UAAU,GAAG,EAAtC,EAA0Cf,SAAS,GAAG,EAAtD,EAA0D;AACxDgB,IAAAA,MAAM,CAACC,OAAP,CAAeH,MAAf,EAAuBZ,OAAvB,CAA+B,CAAC,CAACgB,GAAD,EAAMnB,KAAN,CAAD,KAAkB;AAC/C,UAAI,CAACa,eAAD,IAAoBA,eAAe,IAAI,CAACA,eAAe,CAAC,CAAC,GAAGG,UAAJ,EAAgBG,GAAhB,CAAD,CAA3D,EAAmF;AACjF,YAAInB,KAAK,KAAKoB,SAAV,IAAuBpB,KAAK,KAAK,IAArC,EAA2C;AACzC,cAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BiB,MAAM,CAAClB,IAAP,CAAYC,KAAZ,EAAmBM,MAAnB,GAA4B,CAA7D,EAAgE;AAC9DQ,YAAAA,OAAO,CAACd,KAAD,EAAQ,CAAC,GAAGgB,UAAJ,EAAgBG,GAAhB,CAAR,EAA8BZ,KAAK,CAACC,OAAN,CAAcR,KAAd,IAAuB,CAAC,GAAGC,SAAJ,EAAekB,GAAf,CAAvB,GAA6ClB,SAA3E,CAAP;AACD,WAFD,MAEO;AACLW,YAAAA,QAAQ,CAAC,CAAC,GAAGI,UAAJ,EAAgBG,GAAhB,CAAD,EAAuBnB,KAAvB,EAA8BC,SAA9B,CAAR;AACD;AACF;AACF;AACF,KAVD;AAWD;;AAEDa,EAAAA,OAAO,CAAChB,GAAD,CAAP;AACD,CAhBM;;AAkBP,MAAMuB,WAAW,GAAG,CAACtB,IAAD,EAAOC,KAAP,KAAiB;AACnC,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,QAAI,CAAC,YAAD,EAAe,YAAf,EAA6B,SAA7B,EAAwC,QAAxC,EAAkDsB,IAAlD,CAAuDC,IAAI,IAAIxB,IAAI,CAACW,QAAL,CAAca,IAAd,CAA/D,CAAJ,EAAyF;AACvF;AACA,aAAOvB,KAAP;AACD;;AAED,UAAMwB,OAAO,GAAGzB,IAAI,CAACA,IAAI,CAACO,MAAL,GAAc,CAAf,CAApB;;AAEA,QAAIkB,OAAO,CAACC,WAAR,GAAsBC,OAAtB,CAA8B,SAA9B,KAA4C,CAAhD,EAAmD;AACjD;AACA,aAAO1B,KAAP;AACD;;AAED,WAAQ,GAAEA,KAAM,IAAhB;AACD;;AAED,SAAOA,KAAP;AACD,CAlBD;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,eAAe,SAAS2B,aAAT,CAAuBC,KAAvB,EAA8BC,OAA9B,EAAuC;AACpD,QAAM;AACJC,IAAAA,MADI;AAEJC,IAAAA,UAAU,GAAG,EAFT;AAGJC,IAAAA;AAHI,MAIFH,OAAO,IAAI,EAJf;AAKA,QAAMI,GAAG,GAAG,EAAZ;AACA,QAAMC,IAAI,GAAG,EAAb;AACA,QAAMC,WAAW,GAAG,EAApB;AACAxB,EAAAA,cAAc,CAACiB,KAAD,EAAQ,CAAC7B,IAAD,EAAOC,KAAP,EAAcC,SAAd,KAA4B;AAChD,QAAI,OAAOD,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,QAAlD,EAA4D;AAC1D,UAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACoC,KAAN,CAAY,YAAZ,CAAjC,EAA4D;AAC1D;AACA,YAAI,CAACL,UAAD,IAAeD,MAAnB,EAA2B;AACzB9B,UAAAA,KAAK,GAAGA,KAAK,CAACqC,OAAN,CAAc,aAAd,EAA8B,SAAQP,MAAO,GAA7C,CAAR;AACD,SAFD,MAEO;AACL9B,UAAAA,KAAK,GAAG8B,MAAM,GAAG9B,KAAK,CAACqC,OAAN,CAAc,IAAIC,MAAJ,CAAY,eAAcP,UAAW,EAArC,EAAwC,GAAxC,CAAd,EAA6D,SAAQD,MAAO,EAA5E,CAAH,CAAkF;AAAlF,YACZ9B,KAAK,CAACqC,OAAN,CAAc,IAAIC,MAAJ,CAAY,eAAcP,UAAW,GAArC,EAAyC,GAAzC,CAAd,EAA6D,QAA7D,CADF;AAED;AACF;;AAED,UAAI,CAACC,uBAAD,IAA4BA,uBAAuB,IAAI,CAACA,uBAAuB,CAACjC,IAAD,EAAOC,KAAP,CAAnF,EAAkG;AAChG;AACA,cAAMuC,MAAM,GAAI,KAAIT,MAAM,GAAI,GAAEA,MAAO,GAAb,GAAkB,EAAG,GAAE/B,IAAI,CAACyC,IAAL,CAAU,GAAV,CAAe,EAAhE;AACAvB,QAAAA,MAAM,CAACwB,MAAP,CAAcR,GAAd,EAAmB;AACjB,WAACM,MAAD,GAAUlB,WAAW,CAACtB,IAAD,EAAOC,KAAP;AADJ,SAAnB;AAGAH,QAAAA,gBAAgB,CAACqC,IAAD,EAAOnC,IAAP,EAAc,OAAMwC,MAAO,GAA3B,EAA+BtC,SAA/B,CAAhB;AACD;AACF;;AAEDJ,IAAAA,gBAAgB,CAACsC,WAAD,EAAcpC,IAAd,EAAoBC,KAApB,EAA2BC,SAA3B,CAAhB;AACD,GAvBa,EAuBXF,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAJ,KAAY,MAvBT,CAuBgB;AAvBhB,GAAd;AAyBA,SAAO;AACLkC,IAAAA,GADK;AAELC,IAAAA,IAFK;AAGLC,IAAAA;AAHK,GAAP;AAKD","sourcesContent":["/**\r\n * This function create an object from keys, value and then assign to target\r\n *\r\n * @param {Object} obj : the target object to be assigned\r\n * @param {string[]} keys\r\n * @param {string | number} value\r\n *\r\n * @example\r\n * const source = {}\r\n * assignNestedKeys(source, ['palette', 'primary'], 'var(--palette-primary)')\r\n * console.log(source) // { palette: { primary: 'var(--palette-primary)' } }\r\n *\r\n * @example\r\n * const source = { palette: { primary: 'var(--palette-primary)' } }\r\n * assignNestedKeys(source, ['palette', 'secondary'], 'var(--palette-secondary)')\r\n * console.log(source) // { palette: { primary: 'var(--palette-primary)', secondary: 'var(--palette-secondary)' } }\r\n */\r\nexport const assignNestedKeys = (obj, keys, value, arrayKeys = []) => {\r\n  let temp = obj;\r\n  keys.forEach((k, index) => {\r\n    if (index === keys.length - 1) {\r\n      if (Array.isArray(temp)) {\r\n        temp[Number(k)] = value;\r\n      } else if (temp && typeof temp === 'object') {\r\n        temp[k] = value;\r\n      }\r\n    } else if (temp && typeof temp === 'object') {\r\n      if (!temp[k]) {\r\n        temp[k] = arrayKeys.includes(k) ? [] : {};\r\n      }\r\n\r\n      temp = temp[k];\r\n    }\r\n  });\r\n};\r\n/**\r\n *\r\n * @param {Object} obj : source object\r\n * @param {Function} callback : a function that will be called when\r\n *                   - the deepest key in source object is reached\r\n *                   - the value of the deepest key is NOT `undefined` | `null`\r\n *\r\n * @example\r\n * walkObjectDeep({ palette: { primary: { main: '#000000' } } }, console.log)\r\n * // ['palette', 'primary', 'main'] '#000000'\r\n */\r\n\r\nexport const walkObjectDeep = (obj, callback, shouldSkipPaths) => {\r\n  function recurse(object, parentKeys = [], arrayKeys = []) {\r\n    Object.entries(object).forEach(([key, value]) => {\r\n      if (!shouldSkipPaths || shouldSkipPaths && !shouldSkipPaths([...parentKeys, key])) {\r\n        if (value !== undefined && value !== null) {\r\n          if (typeof value === 'object' && Object.keys(value).length > 0) {\r\n            recurse(value, [...parentKeys, key], Array.isArray(value) ? [...arrayKeys, key] : arrayKeys);\r\n          } else {\r\n            callback([...parentKeys, key], value, arrayKeys);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  recurse(obj);\r\n};\r\n\r\nconst getCssValue = (keys, value) => {\r\n  if (typeof value === 'number') {\r\n    if (['lineHeight', 'fontWeight', 'opacity', 'zIndex'].some(prop => keys.includes(prop))) {\r\n      // CSS property that are unitless\r\n      return value;\r\n    }\r\n\r\n    const lastKey = keys[keys.length - 1];\r\n\r\n    if (lastKey.toLowerCase().indexOf('opacity') >= 0) {\r\n      // opacity values are unitless\r\n      return value;\r\n    }\r\n\r\n    return `${value}px`;\r\n  }\r\n\r\n  return value;\r\n};\r\n/**\r\n * a function that parse theme and return { css, vars }\r\n *\r\n * @param {Object} theme\r\n * @param {{\r\n *  prefix?: string,\r\n *  basePrefix?: string,\r\n *  shouldSkipGeneratingVar?: (objectPathKeys: Array<string>, value: string | number) => boolean\r\n * }} options.\r\n *  `basePrefix`: defined by design system.\r\n *  `prefix`: defined by application\r\n *\r\n *   the CSS variable value will be adjusted based on the provided `basePrefix` & `prefix` which can be found in `parsedTheme`.\r\n *\r\n * @returns {{ css: Object, vars: Object, parsedTheme: typeof theme }} `css` is the stylesheet, `vars` is an object to get css variable (same structure as theme), and `parsedTheme` is the cloned version of theme.\r\n *\r\n * @example\r\n * const { css, vars, parsedTheme } = parser({\r\n *   fontSize: 12,\r\n *   lineHeight: 1.2,\r\n *   palette: { primary: { 500: 'var(--color)' } }\r\n * }, { prefix: 'foo' })\r\n *\r\n * console.log(css) // { '--foo-fontSize': '12px', '--foo-lineHeight': 1.2, '--foo-palette-primary-500': 'var(--foo-color)' }\r\n * console.log(vars) // { fontSize: '--foo-fontSize', lineHeight: '--foo-lineHeight', palette: { primary: { 500: 'var(--foo-palette-primary-500)' } } }\r\n * console.log(parsedTheme) // { fontSize: 12, lineHeight: 1.2, palette: { primary: { 500: 'var(--foo-color)' } } }\r\n */\r\n\r\n\r\nexport default function cssVarsParser(theme, options) {\r\n  const {\r\n    prefix,\r\n    basePrefix = '',\r\n    shouldSkipGeneratingVar\r\n  } = options || {};\r\n  const css = {};\r\n  const vars = {};\r\n  const parsedTheme = {};\r\n  walkObjectDeep(theme, (keys, value, arrayKeys) => {\r\n    if (typeof value === 'string' || typeof value === 'number') {\r\n      if (typeof value === 'string' && value.match(/var\\(\\s*--/)) {\r\n        // for CSS variable, apply prefix or remove basePrefix from the variable\r\n        if (!basePrefix && prefix) {\r\n          value = value.replace(/var\\(\\s*--/g, `var(--${prefix}-`);\r\n        } else {\r\n          value = prefix ? value.replace(new RegExp(`var\\\\(\\\\s*--${basePrefix}`, 'g'), `var(--${prefix}`) // removing spaces\r\n          : value.replace(new RegExp(`var\\\\(\\\\s*--${basePrefix}-`, 'g'), 'var(--');\r\n        }\r\n      }\r\n\r\n      if (!shouldSkipGeneratingVar || shouldSkipGeneratingVar && !shouldSkipGeneratingVar(keys, value)) {\r\n        // only create css & var if `shouldSkipGeneratingVar` return false\r\n        const cssVar = `--${prefix ? `${prefix}-` : ''}${keys.join('-')}`;\r\n        Object.assign(css, {\r\n          [cssVar]: getCssValue(keys, value)\r\n        });\r\n        assignNestedKeys(vars, keys, `var(${cssVar})`, arrayKeys);\r\n      }\r\n    }\r\n\r\n    assignNestedKeys(parsedTheme, keys, value, arrayKeys);\r\n  }, keys => keys[0] === 'vars' // skip 'vars/*' paths\r\n  );\r\n  return {\r\n    css,\r\n    vars,\r\n    parsedTheme\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}