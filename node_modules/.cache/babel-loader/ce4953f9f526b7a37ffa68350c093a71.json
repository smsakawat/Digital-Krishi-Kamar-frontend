{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"colorSchemes\"],\n      _excluded2 = [\"palette\"];\nimport { deepmerge } from '@mui/utils';\nimport { colorChannel } from '@mui/system';\nimport createThemeWithoutVars from './createTheme';\nexport default function extendTheme(options = {}, ...args) {\n  var _colorSchemesInput$li, _colorSchemesInput$da, _colorSchemesInput$li2, _colorSchemesInput$da2;\n\n  const {\n    colorSchemes: colorSchemesInput = {}\n  } = options,\n        input = _objectWithoutPropertiesLoose(options, _excluded);\n\n  const _createThemeWithoutVa = createThemeWithoutVars(_extends({}, input, colorSchemesInput.light && {\n    palette: (_colorSchemesInput$li = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li.palette\n  })),\n        {\n    palette: lightPalette\n  } = _createThemeWithoutVa,\n        muiTheme = _objectWithoutPropertiesLoose(_createThemeWithoutVa, _excluded2);\n\n  const {\n    palette: darkPalette\n  } = createThemeWithoutVars({\n    palette: _extends({\n      mode: 'dark'\n    }, (_colorSchemesInput$da = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da.palette)\n  });\n\n  let theme = _extends({}, muiTheme, {\n    colorSchemes: _extends({}, colorSchemesInput, {\n      light: _extends({}, colorSchemesInput.light, {\n        palette: lightPalette,\n        opacity: _extends({\n          placeholder: 0.42,\n          inputTouchBottomLine: 0.42\n        }, (_colorSchemesInput$li2 = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li2.opacity)\n      }),\n      dark: _extends({}, colorSchemesInput.dark, {\n        palette: darkPalette,\n        opacity: _extends({\n          placeholder: 0.5,\n          inputTouchBottomLine: 0.7\n        }, (_colorSchemesInput$da2 = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da2.opacity)\n      })\n    })\n  });\n\n  Object.keys(theme.colorSchemes).forEach(key => {\n    const palette = theme.colorSchemes[key].palette; // attach black & white channels to common node\n\n    if (key === 'dark') {\n      palette.common.background = palette.common.background || '#000';\n      palette.common.onBackground = palette.common.onBackground || '#fff';\n    } else {\n      palette.common.background = palette.common.background || '#fff';\n      palette.common.onBackground = palette.common.onBackground || '#000';\n    }\n\n    palette.common.backgroundChannel = colorChannel(palette.common.background);\n    palette.common.onBackgroundChannel = colorChannel(palette.common.onBackground);\n    palette.dividerChannel = colorChannel(palette.divider); // special token for Tooltip\n    // TODO: consider adding `main`, and `light` to palette.grey to make it consistent.\n\n    if (!palette.grey.dark) {\n      palette.grey.dark = palette.grey[700];\n    }\n\n    Object.keys(palette).forEach(color => {\n      const colors = palette[color]; // Color palettes: primary, secondary, error, info, success, and warning\n\n      if (colors.main) {\n        palette[color].mainChannel = colorChannel(colors.main);\n      }\n\n      if (colors.light) {\n        palette[color].lightChannel = colorChannel(colors.light);\n      }\n\n      if (colors.dark) {\n        palette[color].darkChannel = colorChannel(colors.dark);\n      }\n\n      if (colors.contrastText) {\n        palette[color].contrastTextChannel = colorChannel(colors.contrastText);\n      } // Text colors: text.primary, text.secondary\n\n\n      if (colors.primary) {\n        palette[color].primaryChannel = colorChannel(colors.primary);\n      }\n\n      if (colors.secondary) {\n        palette[color].secondaryChannel = colorChannel(colors.secondary);\n      }\n    });\n  });\n  theme = args.reduce((acc, argument) => deepmerge(acc, argument), theme);\n  return theme;\n}","map":{"version":3,"sources":["G:/CODE/Development/Projects/Frontend/Digital-Krishi-Khamar/node_modules/@mui/material/styles/experimental_extendTheme.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","_excluded2","deepmerge","colorChannel","createThemeWithoutVars","extendTheme","options","args","_colorSchemesInput$li","_colorSchemesInput$da","_colorSchemesInput$li2","_colorSchemesInput$da2","colorSchemes","colorSchemesInput","input","_createThemeWithoutVa","light","palette","lightPalette","muiTheme","darkPalette","mode","dark","theme","opacity","placeholder","inputTouchBottomLine","Object","keys","forEach","key","common","background","onBackground","backgroundChannel","onBackgroundChannel","dividerChannel","divider","grey","color","colors","main","mainChannel","lightChannel","darkChannel","contrastText","contrastTextChannel","primary","primaryChannel","secondary","secondaryChannel","reduce","acc","argument"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nconst _excluded = [\"colorSchemes\"],\r\n      _excluded2 = [\"palette\"];\r\nimport { deepmerge } from '@mui/utils';\r\nimport { colorChannel } from '@mui/system';\r\nimport createThemeWithoutVars from './createTheme';\r\nexport default function extendTheme(options = {}, ...args) {\r\n  var _colorSchemesInput$li, _colorSchemesInput$da, _colorSchemesInput$li2, _colorSchemesInput$da2;\r\n\r\n  const {\r\n    colorSchemes: colorSchemesInput = {}\r\n  } = options,\r\n        input = _objectWithoutPropertiesLoose(options, _excluded);\r\n\r\n  const _createThemeWithoutVa = createThemeWithoutVars(_extends({}, input, colorSchemesInput.light && {\r\n    palette: (_colorSchemesInput$li = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li.palette\r\n  })),\r\n        {\r\n    palette: lightPalette\r\n  } = _createThemeWithoutVa,\r\n        muiTheme = _objectWithoutPropertiesLoose(_createThemeWithoutVa, _excluded2);\r\n\r\n  const {\r\n    palette: darkPalette\r\n  } = createThemeWithoutVars({\r\n    palette: _extends({\r\n      mode: 'dark'\r\n    }, (_colorSchemesInput$da = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da.palette)\r\n  });\r\n\r\n  let theme = _extends({}, muiTheme, {\r\n    colorSchemes: _extends({}, colorSchemesInput, {\r\n      light: _extends({}, colorSchemesInput.light, {\r\n        palette: lightPalette,\r\n        opacity: _extends({\r\n          placeholder: 0.42,\r\n          inputTouchBottomLine: 0.42\r\n        }, (_colorSchemesInput$li2 = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li2.opacity)\r\n      }),\r\n      dark: _extends({}, colorSchemesInput.dark, {\r\n        palette: darkPalette,\r\n        opacity: _extends({\r\n          placeholder: 0.5,\r\n          inputTouchBottomLine: 0.7\r\n        }, (_colorSchemesInput$da2 = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da2.opacity)\r\n      })\r\n    })\r\n  });\r\n\r\n  Object.keys(theme.colorSchemes).forEach(key => {\r\n    const palette = theme.colorSchemes[key].palette; // attach black & white channels to common node\r\n\r\n    if (key === 'dark') {\r\n      palette.common.background = palette.common.background || '#000';\r\n      palette.common.onBackground = palette.common.onBackground || '#fff';\r\n    } else {\r\n      palette.common.background = palette.common.background || '#fff';\r\n      palette.common.onBackground = palette.common.onBackground || '#000';\r\n    }\r\n\r\n    palette.common.backgroundChannel = colorChannel(palette.common.background);\r\n    palette.common.onBackgroundChannel = colorChannel(palette.common.onBackground);\r\n    palette.dividerChannel = colorChannel(palette.divider); // special token for Tooltip\r\n    // TODO: consider adding `main`, and `light` to palette.grey to make it consistent.\r\n\r\n    if (!palette.grey.dark) {\r\n      palette.grey.dark = palette.grey[700];\r\n    }\r\n\r\n    Object.keys(palette).forEach(color => {\r\n      const colors = palette[color]; // Color palettes: primary, secondary, error, info, success, and warning\r\n\r\n      if (colors.main) {\r\n        palette[color].mainChannel = colorChannel(colors.main);\r\n      }\r\n\r\n      if (colors.light) {\r\n        palette[color].lightChannel = colorChannel(colors.light);\r\n      }\r\n\r\n      if (colors.dark) {\r\n        palette[color].darkChannel = colorChannel(colors.dark);\r\n      }\r\n\r\n      if (colors.contrastText) {\r\n        palette[color].contrastTextChannel = colorChannel(colors.contrastText);\r\n      } // Text colors: text.primary, text.secondary\r\n\r\n\r\n      if (colors.primary) {\r\n        palette[color].primaryChannel = colorChannel(colors.primary);\r\n      }\r\n\r\n      if (colors.secondary) {\r\n        palette[color].secondaryChannel = colorChannel(colors.secondary);\r\n      }\r\n    });\r\n  });\r\n  theme = args.reduce((acc, argument) => deepmerge(acc, argument), theme);\r\n  return theme;\r\n}"]},"metadata":{},"sourceType":"module"}