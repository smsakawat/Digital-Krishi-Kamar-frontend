{"ast":null,"code":"import _slicedToArray from \"G:/CODE/Development/Projects/Frontend/Digital-Krishi-Khamar/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport { getThemeProps, useThemeWithoutDefault as useTheme } from '@mui/system';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\n/**\r\n * @deprecated Not used internally. Use `MediaQueryListEvent` from lib.dom.d.ts instead.\r\n */\n\nfunction useMediaQueryOld(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {\n  var supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n\n  var _React$useState = React.useState(function () {\n    if (noSsr && supportMatchMedia) {\n      return matchMedia(query).matches;\n    }\n\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    } // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n\n\n    // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n    return defaultMatches;\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      match = _React$useState2[0],\n      setMatch = _React$useState2[1];\n\n  useEnhancedEffect(function () {\n    var active = true;\n\n    if (!supportMatchMedia) {\n      return undefined;\n    }\n\n    var queryList = matchMedia(query);\n\n    var updateMatch = function updateMatch() {\n      // Workaround Safari wrong implementation of matchMedia\n      // TODO can we remove it?\n      // https://github.com/mui/material-ui/pull/17315#issuecomment-528286677\n      if (active) {\n        setMatch(queryList.matches);\n      }\n    };\n\n    updateMatch(); // TODO: Use `addEventListener` once support for Safari < 14 is dropped\n\n    queryList.addListener(updateMatch);\n    return function () {\n      active = false;\n      queryList.removeListener(updateMatch);\n    };\n  }, [query, matchMedia, supportMatchMedia]);\n  return match;\n} // eslint-disable-next-line no-useless-concat -- Workaround for https://github.com/webpack/webpack/issues/14814\n\n\nvar maybeReactUseSyncExternalStore = React['useSyncExternalStore' + ''];\n\nfunction useMediaQueryNew(query, defaultMatches, matchMedia, ssrMatchMedia) {\n  var getDefaultSnapshot = React.useCallback(function () {\n    return defaultMatches;\n  }, [defaultMatches]);\n  var getServerSnapshot = React.useMemo(function () {\n    if (ssrMatchMedia !== null) {\n      var _ssrMatchMedia = ssrMatchMedia(query),\n          matches = _ssrMatchMedia.matches;\n\n      return function () {\n        return matches;\n      };\n    }\n\n    return getDefaultSnapshot;\n  }, [getDefaultSnapshot, query, ssrMatchMedia]);\n\n  var _React$useMemo = React.useMemo(function () {\n    if (matchMedia === null) {\n      return [getDefaultSnapshot, function () {\n        return function () {};\n      }];\n    }\n\n    var mediaQueryList = matchMedia(query);\n    return [function () {\n      return mediaQueryList.matches;\n    }, function (notify) {\n      // TODO: Use `addEventListener` once support for Safari < 14 is dropped\n      mediaQueryList.addListener(notify);\n      return function () {\n        mediaQueryList.removeListener(notify);\n      };\n    }];\n  }, [getDefaultSnapshot, matchMedia, query]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n      getSnapshot = _React$useMemo2[0],\n      subscribe = _React$useMemo2[1];\n\n  var match = maybeReactUseSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n  return match;\n}\n\nexport default function useMediaQuery(queryInput) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var theme = useTheme(); // Wait for jsdom to support the match media feature.\n  // All the browsers MUI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n\n  var supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n\n  var _getThemeProps = getThemeProps({\n    name: 'MuiUseMediaQuery',\n    props: options,\n    theme: theme\n  }),\n      _getThemeProps$defaul = _getThemeProps.defaultMatches,\n      defaultMatches = _getThemeProps$defaul === void 0 ? false : _getThemeProps$defaul,\n      _getThemeProps$matchM = _getThemeProps.matchMedia,\n      matchMedia = _getThemeProps$matchM === void 0 ? supportMatchMedia ? window.matchMedia : null : _getThemeProps$matchM,\n      _getThemeProps$ssrMat = _getThemeProps.ssrMatchMedia,\n      ssrMatchMedia = _getThemeProps$ssrMat === void 0 ? null : _getThemeProps$ssrMat,\n      noSsr = _getThemeProps.noSsr;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof queryInput === 'function' && theme === null) {\n      console.error(['MUI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n    }\n  }\n\n  var query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, ''); // TODO: Drop `useMediaQueryOld` and use  `use-sync-external-store` shim in `useMediaQueryNew` once the package is stable\n\n  var useMediaQueryImplementation = maybeReactUseSyncExternalStore !== undefined ? useMediaQueryNew : useMediaQueryOld;\n  var match = useMediaQueryImplementation(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue({\n      query: query,\n      match: match\n    });\n  }\n\n  return match;\n}","map":{"version":3,"sources":["G:/CODE/Development/Projects/Frontend/Digital-Krishi-Khamar/node_modules/@mui/material/useMediaQuery/useMediaQuery.js"],"names":["React","getThemeProps","useThemeWithoutDefault","useTheme","useEnhancedEffect","useMediaQueryOld","query","defaultMatches","matchMedia","ssrMatchMedia","noSsr","supportMatchMedia","window","useState","matches","match","setMatch","active","undefined","queryList","updateMatch","addListener","removeListener","maybeReactUseSyncExternalStore","useMediaQueryNew","getDefaultSnapshot","useCallback","getServerSnapshot","useMemo","mediaQueryList","notify","getSnapshot","subscribe","useMediaQuery","queryInput","options","theme","name","props","process","env","NODE_ENV","console","error","join","replace","useMediaQueryImplementation","useDebugValue"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { getThemeProps, useThemeWithoutDefault as useTheme } from '@mui/system';\r\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\r\n/**\r\n * @deprecated Not used internally. Use `MediaQueryListEvent` from lib.dom.d.ts instead.\r\n */\r\n\r\nfunction useMediaQueryOld(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {\r\n  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\r\n  const [match, setMatch] = React.useState(() => {\r\n    if (noSsr && supportMatchMedia) {\r\n      return matchMedia(query).matches;\r\n    }\r\n\r\n    if (ssrMatchMedia) {\r\n      return ssrMatchMedia(query).matches;\r\n    } // Once the component is mounted, we rely on the\r\n    // event listeners to return the correct matches value.\r\n\r\n\r\n    return defaultMatches;\r\n  });\r\n  useEnhancedEffect(() => {\r\n    let active = true;\r\n\r\n    if (!supportMatchMedia) {\r\n      return undefined;\r\n    }\r\n\r\n    const queryList = matchMedia(query);\r\n\r\n    const updateMatch = () => {\r\n      // Workaround Safari wrong implementation of matchMedia\r\n      // TODO can we remove it?\r\n      // https://github.com/mui/material-ui/pull/17315#issuecomment-528286677\r\n      if (active) {\r\n        setMatch(queryList.matches);\r\n      }\r\n    };\r\n\r\n    updateMatch(); // TODO: Use `addEventListener` once support for Safari < 14 is dropped\r\n\r\n    queryList.addListener(updateMatch);\r\n    return () => {\r\n      active = false;\r\n      queryList.removeListener(updateMatch);\r\n    };\r\n  }, [query, matchMedia, supportMatchMedia]);\r\n  return match;\r\n} // eslint-disable-next-line no-useless-concat -- Workaround for https://github.com/webpack/webpack/issues/14814\r\n\r\n\r\nconst maybeReactUseSyncExternalStore = React['useSyncExternalStore' + ''];\r\n\r\nfunction useMediaQueryNew(query, defaultMatches, matchMedia, ssrMatchMedia) {\r\n  const getDefaultSnapshot = React.useCallback(() => defaultMatches, [defaultMatches]);\r\n  const getServerSnapshot = React.useMemo(() => {\r\n    if (ssrMatchMedia !== null) {\r\n      const {\r\n        matches\r\n      } = ssrMatchMedia(query);\r\n      return () => matches;\r\n    }\r\n\r\n    return getDefaultSnapshot;\r\n  }, [getDefaultSnapshot, query, ssrMatchMedia]);\r\n  const [getSnapshot, subscribe] = React.useMemo(() => {\r\n    if (matchMedia === null) {\r\n      return [getDefaultSnapshot, () => () => {}];\r\n    }\r\n\r\n    const mediaQueryList = matchMedia(query);\r\n    return [() => mediaQueryList.matches, notify => {\r\n      // TODO: Use `addEventListener` once support for Safari < 14 is dropped\r\n      mediaQueryList.addListener(notify);\r\n      return () => {\r\n        mediaQueryList.removeListener(notify);\r\n      };\r\n    }];\r\n  }, [getDefaultSnapshot, matchMedia, query]);\r\n  const match = maybeReactUseSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\r\n  return match;\r\n}\r\n\r\nexport default function useMediaQuery(queryInput, options = {}) {\r\n  const theme = useTheme(); // Wait for jsdom to support the match media feature.\r\n  // All the browsers MUI support have this built-in.\r\n  // This defensive check is here for simplicity.\r\n  // Most of the time, the match media logic isn't central to people tests.\r\n\r\n  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\r\n  const {\r\n    defaultMatches = false,\r\n    matchMedia = supportMatchMedia ? window.matchMedia : null,\r\n    ssrMatchMedia = null,\r\n    noSsr\r\n  } = getThemeProps({\r\n    name: 'MuiUseMediaQuery',\r\n    props: options,\r\n    theme\r\n  });\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (typeof queryInput === 'function' && theme === null) {\r\n      console.error(['MUI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\r\n    }\r\n  }\r\n\r\n  let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\r\n  query = query.replace(/^@media( ?)/m, ''); // TODO: Drop `useMediaQueryOld` and use  `use-sync-external-store` shim in `useMediaQueryNew` once the package is stable\r\n\r\n  const useMediaQueryImplementation = maybeReactUseSyncExternalStore !== undefined ? useMediaQueryNew : useMediaQueryOld;\r\n  const match = useMediaQueryImplementation(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr);\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    // eslint-disable-next-line react-hooks/rules-of-hooks\r\n    React.useDebugValue({\r\n      query,\r\n      match\r\n    });\r\n  }\r\n\r\n  return match;\r\n}"]},"metadata":{},"sourceType":"module"}